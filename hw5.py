import pathlib
from os import path
from typing import Union, Tuple
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt


def _get_hist(ax):
    n, bins = [], []
    for rect in ax.patches:
        ((x0, y0), (x1, y1)) = rect.get_bbox().get_points()
        n.append(y1 - y0)
        bins.append(x0)  # left edge of each bin
    bins.append(x1)  # also get right edge of last bin

    return n, bins


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        if not path.exists(data_fname):
            raise ValueError

        self.data_fname = pathlib.PosixPath(data_fname)
        self.data = None

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

    Returns
    -------
    hist : np.ndarray
      Number of people in a given bin
    bins : np.ndarray
      Bin edges
        """
        ax = self.data.hist(column="age", bins=range(0, 110, 10))
        plt.show()
        return _get_hist(ax[0][0])

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

    Returns
    -------
    df : pd.DataFrame
      A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
      the (ordinal) index after a reset.
        """
        return self.data[self.data.email.str.contains("[^@]+@[^@]+\.[^@]+", regex=True)].reset_index()

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

    Returns
    -------
    df : pd.DataFrame
      The corrected DataFrame after insertion of the mean grade
    arr : np.ndarray
          Row indices of the students that their new grades were generated
        """
        df = self.data[['q1', 'q2', 'q3', 'q4', 'q5']].fillna(self.data.mean())
        rows = self.data[
            self.data['q1'].isnull() | self.data['q2'].isnull() | self.data['q3'].isnull() | self.data['q4'].isnull() |
            self.data['q5'].isnull()].index.tolist()
        return df, rows

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        questions = ['q1', 'q2', 'q3', 'q4', 'q5']

        df = self.data
        df["null_count"] = df[questions].isnull().sum(axis=1)
        df["score"] = df[questions].mean(axis=1).astype(int)
        df.loc[df.null_count > maximal_nans_per_sub, "score"] = None
        df["score"] = df["score"].astype(pd.UInt8Dtype())
        return df